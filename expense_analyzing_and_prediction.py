# -*- coding: utf-8 -*-
"""Expense Analyzing and Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rOWjDwVrSALHlIsxbWDoGB89lEw-JFlx

Title: Expense Analyzing and Prediction

Description:

There is a dataset of 4 persons family expences during three years, these dataset includes 11 features [ Date,Account,Category,Subcategory, Note, CAD,Income/Expense, Description, Amount, Currency,Account]
I want to use date, category, income/expense and amount

from income/expense I need only expences becuase the aim is analyzing and prediction my expenses

category include 27 items which i will expand them as new features to use in next analysing and also I merged some of them as bellow:

education : documentary + Education

Grocery: Grocery

Personal Expense: family_group1 + family_group2 + Selfcare + Smoking

Car: Gas + Parking + vehicle

Health_insurance: health&insurance

Entertainment: Drink&Entertainment + Gift+ Restaurant + Trips

furniture: Home appliance

Bills: Mobile&internet , RBC, transportation

Home: Renting

# Import libraries:
"""

import pandas as pd
import plotly.express as px
import tkinter as tk
from tkinter import filedialog

"""# `1- Data Preprocessing:`"""

#from google.colab import files
#uploaded = files.upload()
#init_dataset = next(iter(uploaded))
#df_maindata = pd.read_excel(init_dataset, engine='openpyxl')

root = tk.Tk()
root.withdraw()

file_path = filedialog.askopenfilename(
    title="Select Excel File",
    filetypes=[("Excel files", "*.xlsx *.xls")]
)

if file_path:
    df_maindata = pd.read_excel(file_path, engine='openpyxl')

    print(df_maindata.head())
else:
    print("No file selected.")


df_maindata.head()


#initial_row_count = df_maindata.shape[0]
#print(f"Initial row count: {initial_row_count}")

df_expenses = df_maindata[['Date', 'Category', 'Amount']]
df_expenses.head()
expenses_row_count = df_expenses.shape[0]
print(f"Row count after filtering for expenses: {expenses_row_count}")

def map_category(Category):
    category_mapping = {
        'documentary': 'education',
        'Drink & Entertainment': 'entertainment',
        'Education': 'education',
        'Gas': 'car',
        'Gift': 'grocery',
        'Grocery': 'grocery',
        'family_group2': 'personal_expense',
        'Health & Insurance': 'health_insurance',
        'Home Appliances': 'furniture',
        'family_group1': 'personal_expense',
        'Mobile&internet': 'bills',
        'Parking': 'car',
        'Quarantine':'quarantine',
        'RBC': 'bills',
        'Renting': 'home',
        'Restaurant': 'entertainment',
        'Self Care': 'personal_expense',
        'Smoking': 'personal_expense',
        'Transportation': 'bills',
        'Trips': 'entertainment',
        'Vehicle': 'car'
    }
    return category_mapping.get(Category, Category)

df_expenses['Category'] = df_expenses['Category'].apply(map_category)



unique_dates = df_expenses['Date'].unique()
unique_categories = df_expenses['Category'].unique()
df_expenses.head()

# Group by 'Date' and 'Category'
df_expenses = df_expenses.groupby(['Date', 'Category']).agg({'Amount': 'sum'}).reset_index()
# Sort by 'Date'
df_expenses.sort_values(by='Date', inplace=True)
df_expenses.head()

print(df_expenses.shape[0])  # Check the new row count

import pandas as pd

# this section i create a new column for each month of the year and sum all amounts per each month
df_expenses['Date'] = pd.to_datetime(df_expenses['Date'])
df_expenses['YearMonth'] = df_expenses['Date'].dt.to_period('M')
df_monthly_expenses = df_expenses.groupby(['YearMonth', 'Category']).agg({'Amount': 'sum'}).reset_index()
df_monthly_expenses.sort_values(by='YearMonth', inplace=True)


df_monthly_expenses.head()
print(df_monthly_expenses.shape[0])



grocery_df = df_monthly_expenses[df_monthly_expenses['Category'] == 'grocery']
grocery_df.to_csv("Data_grocery.csv", index=False)

df_monthly_expenses.to_excel('transformed_accounting.xlsx', index=False)


# Downloading
#files.download('transformed_accounting.xlsx')

"""
# Visualization:
1- Animated Visual :"""

# Create the line scatter plot


# Ensure 'YearMonth' is in string format
df_monthly_expenses['YearMonth'] = df_monthly_expenses['YearMonth'].astype(str)


fig = px.line(
    df_monthly_expenses,
    x='YearMonth',
    y='Amount',
    color='Category',
    markers=True,
    title='Expenses per Category Over Time',
    labels={'YearMonth': 'Month', 'Amount': 'Expense Amount', 'Category': 'Expense Category'}
)

fig.update_layout(
    xaxis_title='Month',
    yaxis_title='Expense Amount',
    legend_title='Category',
    xaxis=dict(
        tickmode='array',
        tickvals=df_monthly_expenses['YearMonth'].unique(),
        ticktext=[str(period) for period in df_monthly_expenses['YearMonth'].unique()]
    )
)

# Show plot
fig.show()

import pandas as pd
import plotly.express as px

# Check if all categories are in the DataFrame
#print(df_monthly_expenses['Category'].unique())

# Create a complete DataFrame with all combinations of YearMonth and Category
all_categories = df_monthly_expenses['Category'].unique()
all_yearmonths = df_monthly_expenses['YearMonth'].unique()
complete_index = pd.MultiIndex.from_product([all_yearmonths, all_categories], names=['YearMonth', 'Category'])
complete_df = pd.DataFrame(index=complete_index).reset_index()

# Merge with the original DataFrame and fill missing values with zero
df_complete = pd.merge(complete_df, df_monthly_expenses, on=['YearMonth', 'Category'], how='left').fillna(0)

# Create the animated histogram
fig = px.histogram(
    df_complete,
    x='Category',
    y='Amount',
    animation_frame='YearMonth',
    category_orders={'Category': sorted(all_categories)},  # Ensure all categories are in order
    title='Expenses per Category per Month',
    labels={'Category': 'Expense Category', 'Amount': 'Expense Amount'},
    color='Category',
    barmode='group'
)

fig.update_layout(
    xaxis_title='Expense Category',
    yaxis_title='Expense Amount',
    yaxis_range=[0, 3500],
    legend_title='Category'
)
fig.update_xaxes(tickangle=-60)
# Show plot
fig.show()


# Create a complete DataFrame with all combinations of YearMonth and Category
all_categories = df_monthly_expenses['Category'].unique()
all_yearmonths = df_monthly_expenses['YearMonth'].unique()
complete_index = pd.MultiIndex.from_product([all_yearmonths, all_categories], names=['YearMonth', 'Category'])
complete_df = pd.DataFrame(index=complete_index).reset_index()

# Merge with the original DataFrame and fill missing values with zero
df_complete = pd.merge(complete_df, df_monthly_expenses, on=['YearMonth', 'Category'], how='left').fillna(0)

# Create the animated scatter plot
fig = px.scatter(
    df_monthly_expenses,
    x='Amount',
    y='Category',
    animation_frame='YearMonth',
    animation_group='Category',
    size='Amount',
    color='Category',
    hover_name='Category',
    size_max=50,
    title='Expenses per Category per Month',
    labels={'Amount': 'Total Amount', 'Category': 'Expense Category'}
)


fig.update_layout(
    xaxis_title='Total Amount',
    yaxis_title='Expense Category',
    legend_title='Category',
    legend=dict(
        title='Expense Category',
        orientation='h', 
        yanchor='bottom',
        y=1.02,  
        xanchor='right',
        x=1  
    ),
    yaxis=dict(
        categoryorder='total ascending'  
    )
)

# Show the plot
fig.show()

"""# Predictical Model"""

from prophet import Prophet
import matplotlib.pyplot as plt

data = pd.read_csv('Data_grocery.csv', parse_dates=['YearMonth'], index_col='YearMonth')
amounts = data.reset_index().rename(columns={'YearMonth': 'ds', 'Amount': 'y'})
amounts = amounts.drop(["Category"], axis=1)
amounts.head()

model = Prophet()
model.fit(amounts)

future = model.make_future_dataframe(periods=12, freq='M')
forecast = model.predict(future)

# Plot result
fig1 = model.plot(forecast)
plt.show()


fig2 = model.plot_components(forecast)
plt.show()